import numpy as np
import pylab as pl

def compute_delta_power_sensed(v_bias, delta_v_squid, squid_conversion):
	delta_current = delta_v_squid * squid_conversion * 1e-6
	delta_power = v_bias * delta_current # in Watts
	return delta_power


def load_FFT_data(data_path):   
	''' 
	Inputs:
	    data_path:  the path to the .fft data file (string)
	Outputs:
	    frequency_vector: the extracted frequency vector
	    transmission_vector: the extracted frequency vector
	Returns a frequency and transmission vector from the data file 
	produced by Toki's LabView software
	'''
	with open(data_path, 'r') as file_handle:
		lines = file_handle.readlines()
		frequency_vector = np.zeros(len(lines))
		transmission_vector = np.zeros(len(lines))
		for i, line in enumerate(lines):
			frequency = line.split('\t')[0]
			transmission = line.split('\t')[1]
			np.put(frequency_vector, i, frequency)
			np.put(transmission_vector, i, transmission)
	normalized_transmission_vector = transmission_vector / max(transmission_vector)
	return frequency_vector, transmission_vector, normalized_transmission_vector

def compute_delta_power_at_window(frequency, t_source_low=77, t_source_high=300, show_spectra=False):
	boltzmann_constant = 1.38e-23
	spectra_dict = {'220': "..\\Data\\2015_05_27\\002_220_Spectra_Scan.fft",
			'280': "..\\Data\\2015_05_27\\004_280_Spectra_Scan.fft",
			'350': "..\\Data\\2015_05_27\\003_350_Spectra_Scan.fft"}
	fft_data = load_FFT_data(spectra_dict[frequency])
	frequency_vector = fft_data[0]
	normalized_transmission_vector = fft_data[2]
	integrated_bandwidth = np.trapz(normalized_transmission_vector, frequency_vector) * 1e9
	delta_power = boltzmann_constant * (t_source_high - t_source_low) * integrated_bandwidth
	if show_spectra:
		pl.plot(normalized_transmission_vector)
		pl.show()
	return delta_power

def run(input_dict):
	frequency = input_dict.keys()[0]
	v_bias = input_dict[frequency]['v_bias']
	delta_v_squid = input_dict[frequency]['delta_v_squid']
	squid_conversion = input_dict[frequency]['squid_conversion']
	delta_power_sensed = compute_delta_power_sensed(v_bias, delta_v_squid, squid_conversion)
	delta_power_at_window = compute_delta_power_at_window(frequency)
	end_to_end_efficiency = delta_power_sensed / delta_power_at_window
	print 
	print
	print 'Analysis for {0} GHz Bolo'.format(frequency)
	print 'Delta_Power_Sensed: {0} W'.format(delta_power_sensed)
	print 'Delta_Power_at_Window: {0} W'.format(delta_power_at_window)
	print 'Efficiency: {:.3f}%'.format(100.0 * end_to_end_efficiency)
	print 
	print

if __name__ == '__main__':
	input_dict_220 = {'220': {'v_bias': 0.878e-4, 'delta_v_squid': 0.0104, 'squid_conversion': 30.0}}
	input_dict_280 = {'280': {'v_bias': 0.395e-4, 'delta_v_squid': 0.0012, 'squid_conversion': 30.0}}
	input_dict_350 = {'350': {'v_bias': 0.508e-4, 'delta_v_squid': 0.0025, 'squid_conversion': 28.5}}
	for input_dict in [input_dict_350, input_dict_280, input_dict_220]:
		run(input_dict)
