import pylab as pl
import numpy as np
import sys

def load_simulation_data(data_path):   
	''' 
	Inputs:
	    data_path:  the path to the .fft data file (string)
	Outputs:
	    frequency_vector: the extracted frequency vector
	    transmission_vector: the extracted frequency vector
	Returns a frequency and transmission vector from the data file 
	produced by Toki's LabView software
	'''
	with open(data_path, 'r') as file_handle:
		lines = file_handle.readlines()
		frequency_vector = np.zeros(len(lines))
		transmission_vector = np.zeros(len(lines))
		for i, line in enumerate(lines):
			frequency = line.split('\t')[0]
			transmission = line.split('\t')[1].strip('\n')
			transmission = 10.0 ** (float(transmission)/10.0)
			np.put(frequency_vector, i, float(frequency))
			np.put(transmission_vector, i, float(transmission))
			print frequency, transmission
	normalized_transmission_vector = transmission_vector / max(transmission_vector)
	return frequency_vector, transmission_vector, normalized_transmission_vector

def load_FFT_data(data_path):   
	''' 
	Inputs:
	    data_path:  the path to the .fft data file (string)
	Outputs:
	    frequency_vector: the extracted frequency vector
	    transmission_vector: the extracted frequency vector
	Returns a frequency and transmission vector from the data file 
	produced by Toki's LabView software
	'''
	with open(data_path, 'r') as file_handle:
		lines = file_handle.readlines()
		frequency_vector = np.zeros(len(lines))
		transmission_vector = np.zeros(len(lines))
		for i, line in enumerate(lines):
			frequency = line.split('\t')[0]
			transmission = line.split('\t')[1]
			np.put(frequency_vector, i, frequency)
			np.put(transmission_vector, i, transmission)
	normalized_transmission_vector = transmission_vector / max(transmission_vector)
	return frequency_vector, transmission_vector, normalized_transmission_vector

def plot_FFT_data(frequency_vector, transmission_vector, color='b', label=''):
	'''
	This function will take the output of Load_FFT_Data
	'''
	fig = pl.figure()
	ax1 = fig.add_subplot(111)
	ax1.plot(frequency_vector, transmission_vector, color, label=label, lw=5)
	fig.subplots_adjust(bottom=0.12, top =0.96, left=0.16, right=0.84)
	ax1.tick_params(labelsize=20)
	ax1.set_xlabel('Frequency (GHz)', fontsize=28)
	ax1.set_ylabel('Normalized Transmission', fontsize=28)
	pl.xlim([100, 550])
	pl.ylim([-0.05, 1.05])
	print dir(ax1)

def run():
	dict_12icm = {'filter_name': '12icm', 
		      'open_air': {'data_path': "2015_03_20\\003_OpenAir_High_Res.fft",
	   	   	           'label': 'Open Trans', 'color': 'r'},
		      'measurements': {'data_path': "2015_03_20\\004_576_12icm_High_Res.fft",
			               'label': 'Raw Trans', 'color': 'b'}}
	dict_14icm = {'filter_name': '14icm', 
		      'open_air': {'data_path': "2015_03_20\\003_OpenAir_High_Res.fft",
	   		           'label': 'Open Trans', 'color': 'g'},
		      'measurements': {'data_path': "2015_03_20\\010_576_14icm_High_Res.fft",
			               'label': 'Raw Trans', 'color': 'm'}}
	dict_18icm = {'filter_name': '18icm', 
		      'open_air': {'data_path': "2015_03_20\\003_OpenAir_High_Res.fft",
	   		           'label': 'Open Trans', 'color': 'k'},
		      'measurements': {'data_path': "2015_03_20\\011_576_18icm_High_Res.fft",
			               'label': 'Raw Trans', 'color': 'm'}}
	for dict_ in [dict_12icm]:
		open_data_path = dict_['open_air']['data_path']
		data_path = dict_['measurements']['data_path']
		label = dict_['measurements']['label']
		color = dict_['measurements']['color']
		open_frequency_vector, open_transmission_vector, open_normalized_transmission_vector = load_FFT_data(open_data_path)
		frequency_vector, transmission_vector, normalized_transmission_vector = load_FFT_data(data_path)
		divided_transmission_vector = transmission_vector / open_transmission_vector
		plot_FFT_data(frequency_vector, divided_transmission_vector, color=color, label=label)
	#pl.title(title_str, fontsize=16)
	pl.legend(prop={'size': 22})
	pl.show()

if __name__ == '__main__':
	run()
